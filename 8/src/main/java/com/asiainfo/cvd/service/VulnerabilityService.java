package com.asiainfo.cvd.service;

import com.asiainfo.cvd.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class VulnerabilityService {
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityService.class);
    private static final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
    private final String dataStorePath;

    public VulnerabilityService(String dataStorePath) {
        this.dataStorePath = dataStorePath;
    }

    /**
     * 保存漏洞信息到JSON文件
     */
    public void saveVulnerabilityData(String sourceFileNameWithoutSuffix, List<BoVulnerability> vulnerabilities, 
            List<BoVulnerabilityCve> cves, List<BoVulnerabilityProduct> products) throws IOException {
        
        String datePath = LocalDate.now().format(DateTimeFormatter.ISO_DATE);
        String storePath = Paths.get(dataStorePath, datePath).toString();
        createDirectoryIfNotExists(storePath);

        // 保存漏洞信息
        File vulnFile = new File(storePath, sourceFileNameWithoutSuffix + "_vulnerabilities.json");
        objectMapper.writeValue(vulnFile, vulnerabilities);

        // 保存CVE信息
        File cveFile = new File(storePath, sourceFileNameWithoutSuffix + "_cves.json");
        objectMapper.writeValue(cveFile, cves);

        // 保存产品信息
        File productFile = new File(storePath, sourceFileNameWithoutSuffix + "_products.json");
        objectMapper.writeValue(productFile, products);
        
        logger.info("Vulnerability Data Saved to: {}", storePath);
    }

    /**
     * 读取漏洞信息
     */
    public BoVulnerability readVulnerability(String datePath, String cnvdNumber) throws IOException {
        File[] dateDirs = new File(dataStorePath).listFiles(File::isDirectory);
        if (dateDirs != null) {
            for (File dateDir : dateDirs) {
                File[] vulnFiles = dateDir.listFiles((dir, name) -> name.endsWith("_vulnerabilities.json"));
                if (vulnFiles != null) {
                    for (File vulnFile : vulnFiles) {
                        List<BoVulnerability> vulnerabilities = objectMapper.readValue(vulnFile,
                                objectMapper.getTypeFactory().constructCollectionType(List.class, BoVulnerability.class));
                        Optional<BoVulnerability> found = vulnerabilities.stream()
                                .filter(v -> v.getNumber().equals(cnvdNumber))
                                .findFirst();
                        if (found.isPresent()) {
                            return found.get();
                        }
                    }
                }
            }
        }
        return null;
    }

    /**
     * 读取指定文件和组件的漏洞产品信息
     */
    public List<BoVulnerabilityProduct> readVulnerabilityProducts(String sourceFileNameWithoutSuffix, String componentName) throws IOException {
        String datePath = LocalDate.now().format(DateTimeFormatter.ISO_DATE);
        String storePath = Paths.get(dataStorePath, datePath).toString();
        File productFile = new File(storePath, sourceFileNameWithoutSuffix + "_products.json");
        
        if (!productFile.exists()) {
            return new ArrayList<>();
        }

        List<BoVulnerabilityProduct> allProducts = objectMapper.readValue(productFile,
                objectMapper.getTypeFactory().constructCollectionType(List.class, BoVulnerabilityProduct.class));

        // 过滤出包含指定组件名称的产品
        return allProducts.stream()
                .filter(product -> product.getProduct().toLowerCase().startsWith(componentName.toLowerCase()))
                .collect(Collectors.toList());
    }

    /**
     * 去除重复的漏洞预警信息
     */
    public List<VulnerabilityAlert> eliminateDuplicate(List<VulnerabilityAlert> vulnerabilityAlertList) {
        Counter counter = new Counter();

        return vulnerabilityAlertList.stream()
                .collect(Collectors.groupingBy(VulnerabilityAlert::getCnvdNumber))
                .values().stream()
                .map(alerts -> {
                    String sourceFileNameWithoutSuffix = alerts.get(0).getSourceFileNameWithoutSuffix();
                    String component = alerts.get(0).getComponent();
                    String cnvdNumber = alerts.get(0).getCnvdNumber();
                    String cveNumber = alerts.get(0).getCveNumber();
                    String title = counter.getRawCount() + ". " + alerts.get(0).getTitle();
                    String description = alerts.get(0).getDescription();
                    String severity = alerts.get(0).getSeverity();
                    String openTime = alerts.get(0).getOpenTime();
                    String affectedVersions = alerts.stream()
                            .map(VulnerabilityAlert::getAffectedVersion)
                            .collect(Collectors.joining(", "));
                    String remediationAdvice = alerts.get(0).getRemediationAdvice();
                    return new VulnerabilityAlert(sourceFileNameWithoutSuffix, component, cnvdNumber, cveNumber, title, 
                            description, severity, openTime, affectedVersions, remediationAdvice);
                })
                .collect(Collectors.toList());
    }

    /**
     * 将CVE编号列表转换为逗号分隔的字符串
     */
    public String vulnerabilityCveJoin(List<BoVulnerabilityCve> boVulnerabilityCveList, String cnvdNumber) {
        return boVulnerabilityCveList.stream()
                .filter(cve -> cve.getCnvdNumber().equals(cnvdNumber))
                .map(BoVulnerabilityCve::getCveNumber)
                .collect(Collectors.joining(", "));
    }

    /**
     * 打印漏洞影响产品列表
     */
    public void printBoVulnerabilityProductList(String fileName, List<BoVulnerabilityProduct> boVulnerabilityProductList) {
        Counter counter = new Counter();
        for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList) {
            logger.info("{} -- {} -- {} -- {}", counter.getCount(), fileName, 
                    boVulnerabilityProduct.getCnvdNumber(), boVulnerabilityProduct.getProduct());
        }
    }

    private void createDirectoryIfNotExists(String directory) {
        File file = new File(directory);
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}
