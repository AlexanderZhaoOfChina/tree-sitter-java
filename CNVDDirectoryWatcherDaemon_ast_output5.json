{"type": "program", "children": [{"type": "package_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text": "com"}, {"type": "identifier", "text_ref": 7}]}, {"type": "identifier", "text": "cvd"}]}, {"type": "identifier", "text_ref": 8}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_-3110322442706796016"}, {"type": "identifier", "text_ref": 12}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text": "com"}, {"type": "identifier", "text_ref": 18}]}, {"type": "identifier", "text_ref": 19}]}, {"type": "identifier", "text_ref": 20}]}, {"type": "identifier", "text_ref": 21}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_-7421528453640521750"}, {"type": "identifier", "text_ref": 24}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text": "org"}, {"type": "identifier", "text": "w3c"}]}, {"type": "identifier", "text": "dom"}]}, {"type": "identifier", "text_ref": 29}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_6101588166483381602"}, {"type": "identifier", "text_ref": 32}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_6101588166483381602"}, {"type": "identifier", "text_ref": 35}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text_ref": 40}, {"type": "identifier", "text": "xml"}]}, {"type": "identifier", "text_ref": 41}]}, {"type": "identifier", "text_ref": 42}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_-225063577778504992"}, {"type": "identifier", "text_ref": 45}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text_ref": 48}, {"type": "identifier", "text": "io"}]}, {"type": "asterisk", "children": [{"_ref": "_ref_-8124747563128122760"}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text_ref": 48}, {"type": "identifier", "text": "nio"}]}, {"type": "identifier", "text_ref": 52}]}, {"type": "asterisk", "children": [{"_ref": "_ref_-8124747563128122760"}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text_ref": 48}, {"type": "identifier", "text_ref": 55}]}, {"type": "asterisk", "children": [{"_ref": "_ref_-8124747563128122760"}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_7555735680813673956"}, {"type": "identifier", "text_ref": 61}]}, {"type": "identifier", "text_ref": 62}]}, {"type": "identifier", "text_ref": 63}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_1010053242277266591"}, {"type": "identifier", "text_ref": 66}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "text": "org"}, {"type": "identifier", "text_ref": 70}]}, {"type": "identifier", "text_ref": 71}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_1157476464768394458"}, {"type": "identifier", "text_ref": 74}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_-3110322442706796016"}, {"type": "identifier", "text_ref": 78}]}, {"type": "identifier", "text_ref": 79}]}]}, {"type": "import_declaration", "children": [{"type": "scoped_identifier", "children": [{"_ref": "_ref_-4860593022345157533"}, {"type": "identifier", "text_ref": 82}]}]}, {"type": "class_declaration", "name_ref": 86, "modifiers": ["public"], "members": {"fields": [{"type": "field_declaration", "children": [{"type": "modifiers", "text": "private static final"}, {"type": "type_identifier", "text_ref": 71}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 93}, {"type": "method_invocation", "children": [{"type": "identifier", "text_ref": 74}, {"type": "identifier", "text_ref": 95}, {"type": "argument_list", "text": "(CNVDDirectoryWatcherDaemon.class)"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"type": "type_identifier", "text_ref": 100}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 102}, {"_ref": "_ref_-1546322209039183266"}, {"type": "method_invocation", "children": [{"type": "identifier", "text_ref": 104}, {"type": "identifier", "text_ref": 105}, {"type": "argument_list", "text": "(\"user.dir\")"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"_ref": "_ref_-2624204164094223436"}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 112}, {"_ref": "_ref_-1546322209039183266"}, {"type": "method_invocation", "children": [{"type": "method_invocation", "children": [{"type": "identifier", "text_ref": 115}, {"type": "identifier", "text": "get"}, {"type": "argument_list", "text": "(BASE_DIR, \"cnvd\")"}]}, {"type": "identifier", "text_ref": 119}, {"type": "argument_list", "text": "()"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"_ref": "_ref_-2624204164094223436"}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 123}, {"_ref": "_ref_-1546322209039183266"}, {"type": "method_invocation", "children": [{"type": "method_invocation", "children": [{"type": "identifier", "text_ref": 115}, {"type": "identifier", "text": "get"}, {"type": "argument_list", "text": "(BASE_DIR, \"data_store\")"}]}, {"type": "identifier", "text_ref": 119}, {"_ref": "_ref_6965440183760244558"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"_ref": "_ref_-2624204164094223436"}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 132}, {"_ref": "_ref_-1546322209039183266"}, {"type": "method_invocation", "children": [{"type": "method_invocation", "children": [{"type": "identifier", "text_ref": 115}, {"type": "identifier", "text": "get"}, {"type": "argument_list", "text": "(BASE_DIR, \"process_status.json\")"}]}, {"type": "identifier", "text_ref": 119}, {"_ref": "_ref_6965440183760244558"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"type": "type_identifier", "text_ref": 21}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 141}, {"_ref": "_ref_-1546322209039183266"}, {"type": "method_invocation", "children": [{"type": "object_creation_expression", "children": [{"_ref": "_ref_2238491824685682692"}, {"_ref": "_ref_6965440183760244558"}]}, {"type": "identifier", "text_ref": 144}, {"type": "argument_list", "text": "(SerializationFeature.INDENT_OUTPUT)"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 152}, {"_ref": "_ref_-1546322209039183266"}, {"type": "decimal_integer_literal", "text_ref": 153}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"type": "type_identifier", "text_ref": 79}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 157}, {"_ref": "_ref_-1546322209039183266"}, {"type": "object_creation_expression", "children": [{"_ref": "_ref_2576286823792731233"}, {"_ref": "_ref_-289054832015203936"}, {"_ref": "_ref_6965440183760244558"}]}]}]}, {"type": "field_declaration", "children": [{"_ref": "_ref_-3653747909334644819"}, {"type": "type_identifier", "text_ref": 82}, {"type": "variable_declarator", "children": [{"type": "identifier", "text_ref": 161}, {"_ref": "_ref_-1546322209039183266"}, {"type": "object_creation_expression", "children": [{"_ref": "_ref_2576286823792731233"}, {"_ref": "_ref_-4353773086849662209"}, {"type": "argument_list", "text": "(DATA_STORE_PATH)"}]}]}]}], "methods": [{"type": "method_declaration", "name_ref": 168, "modifiers": ["public", "static"], "parameters": [{"name_ref": 172}], "body_summary": {"line_comment": 1, "expression_statement": 9, "local_variable_declaration": 2, "try_statement": 1}}, {"type": "method_declaration", "name_ref": 283, "modifiers": ["private", "static"], "parameters": [{"type": "String", "name_ref": 286}], "body_summary": {"try_statement": 1}}, {"type": "method_declaration", "name_ref": 337, "modifiers": ["private", "static"], "parameters": [{"type": "String", "name_ref": 286}, {"type": "String", "name_ref": 340}], "body_summary": {"local_variable_declaration": 2, "if_statement": 1, "expression_statement": 2}}, {"type": "method_declaration", "name_ref": 234, "modifiers": ["private", "static"], "body_summary": {"local_variable_declaration": 2, "if_statement": 1}}, {"type": "method_declaration", "name_ref": 403, "modifiers": ["private", "static"], "parameters": [{"type": "File", "name_ref": 391}], "body_summary": {"local_variable_declaration": 1, "if_statement": 1, "try_statement": 1}}, {"type": "method_declaration", "name_ref": 722, "modifiers": ["private", "static"], "parameters": [{"type": "File", "name_ref": 391}], "body_summary": {"local_variable_declaration": 5, "expression_statement": 1, "if_statement": 1}}, {"type": "method_declaration", "name_ref": 444, "modifiers": ["private", "static"], "parameters": [{"type": "File", "name_ref": 391}], "body_summary": {"expression_statement": 3, "local_variable_declaration": 7, "try_statement": 1}}, {"type": "method_declaration", "name_ref": 177, "modifiers": ["private", "static"], "parameters": [{"type": "String", "name_ref": 369}], "body_summary": {"local_variable_declaration": 1, "if_statement": 1}}]}}], "_symbol_table": ["/**\n * CNVD漏洞信息监控守护进程\n * 功能：\n * 1. 监控指定目录下的XML文件\n * 2. 解析XML文件中的漏洞信息\n * 3. 将漏洞信息存储为JSON文件\n * 4. 生成漏洞预警信息并发送邮件通知\n * 5. 备份已处理的XML文件\n */\npackage com.asiainfo.cvd.daemon;\n\nimport com.asiainfo.cvd.model.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\nimport static com.asiainfo.utils.XMLFilesUtils.collectXMLFiles;\nimport static com.asiainfo.utils.XMLFilesUtils.getStringFromXmlElement;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.asiainfo.cvd.service.ComponentService;\nimport com.asiainfo.cvd.service.VulnerabilityService;\n\npublic class CNVDDirectoryWatcherDaemon {\n\n    private static final Logger logger = LoggerFactory.getLogger(CNVDDirectoryWatcherDaemon.class);\n\n    // 基础目录（程序运行目录）\n    private static final String BASE_DIR = System.getProperty(\"user.dir\");\n\n    // CNVD XML文件监控目录\n    private static final String DIRECTORY_PATH = Paths.get(BASE_DIR, \"cnvd\").toString();\n\n    // 数据存储根目录\n    private static final String DATA_STORE_PATH = Paths.get(BASE_DIR, \"data_store\").toString();\n\n    // 处理状态记录文件\n    private static final String PROCESS_STATUS_FILE = Paths.get(BASE_DIR, \"process_status.json\").toString();\n\n    // JSON文件操作工具\n    private static final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);\n\n    // 扫描间隔时间（毫秒）\n    private static final long SCAN_INTERVAL = 8000;\n\n    // 组件服务\n    private static final ComponentService componentService = new ComponentService();\n    private static final VulnerabilityService vulnerabilityService = new VulnerabilityService(DATA_STORE_PATH);\n\n    /**\n     * 程序入口：启动CNVD目录监控守护进程\n     */\n    public static void main(String[] args) {\n        // 确保必要的目录存在\n        createDirectory(DIRECTORY_PATH);\n        createDirectory(DATA_STORE_PATH);\n        createDirectory(Paths.get(BASE_DIR, \"config\").toString());\n\n        logger.info(\"Base Directory: {}\", BASE_DIR);\n        logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH);\n        logger.info(\"Data Directory: {}\", DATA_STORE_PATH);\n        logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString());\n\n        TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        };\n\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL);\n\n        logger.info(\"Directory watcher started. Press Ctrl+C to exit.\");\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }\n    }\n\n    /**\n     * 检查文件是否已处理\n     */\n    private static boolean isFileProcessed(String fileName) {\n        try {\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    /**\n     * 标记文件处理状态\n     */\n    private static void markFileStatus(String fileName, String status) throws IOException {\n        File statusFile = new File(PROCESS_STATUS_FILE);\n        Map<String, String> processStatus;\n        if (statusFile.exists()) {\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        } else {\n            processStatus = new HashMap<>();\n        }\n        processStatus.put(fileName, status);\n        objectMapper.writeValue(statusFile, processStatus);\n    }\n\n    /**\n     * 高级目录扫描方法\n     */\n    private static void scanDirectory() throws Exception {\n        File directory = new File(DIRECTORY_PATH);\n        List<File> xmlFiles = new ArrayList<>();\n\n        if (directory.exists() && directory.isDirectory()) {\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }\n    }\n\n    /**\n     * 处理单个XML文件\n     */\n    private static void processXmlFile(File xmlFile) throws Exception {\n        String sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"));\n\n        if (isFileProcessed(sourceFileNameWithoutSuffix)) {\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }\n\n        try {\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        } catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }\n    }\n\n    /**\n     * 将处理异常的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */\n    private static void backupXMLFileForException(File xmlFile) throws IOException {\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup_for_exception\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        if (Files.exists(Path.of(sourcePath))) {\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }\n    }\n\n    /**\n     * 将处理完成的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */\n    private static void backupXMLFile(File xmlFile) throws IOException {\n        logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName());\n        long backupStartTime = System.currentTimeMillis();\n\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        try {\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        } catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }\n\n        long backupEndTime = System.currentTimeMillis();\n        logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0);\n    }\n\n    /**\n     * 创建目录（如果不存在）\n     *\n     * @param directory 目录路径\n     */\n    private static void createDirectory(String directory) {\n        File file = new File(directory);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }\n}", "/**\n * CNVD漏洞信息监控守护进程\n * 功能：\n * 1. 监控指定目录下的XML文件\n * 2. 解析XML文件中的漏洞信息\n * 3. 将漏洞信息存储为JSON文件\n * 4. 生成漏洞预警信息并发送邮件通知\n * 5. 备份已处理的XML文件\n */", "package com.asiainfo.cvd.daemon;", "package", "com.asiainfo.cvd.daemon", "com.asiainfo.cvd", "com.asiainfo", "asiainfo", "daemon", "import com.asiainfo.cvd.model.*;", "import", "com.asiainfo.cvd.model", "model", "import com.fasterxml.jackson.databind.ObjectMapper;", "com.fasterxml.jackson.databind.ObjectMapper", "com.fasterxml.jackson.databind", "com.fasterxml.jackson", "com.fasterxml", "fasterxml", "jackson", "databind", "ObjectMapper", "import com.fasterxml.jackson.databind.SerializationFeature;", "com.fasterxml.jackson.databind.SerializationFeature", "SerializationFeature", "import org.w3c.dom.Document;", "org.w3c.dom.Document", "org.w3c.dom", "org.w3c", "Document", "import org.w3c.dom.Element;", "org.w3c.dom.Element", "Element", "import org.w3c.dom.NodeList;", "org.w3c.dom.NodeList", "NodeList", "import javax.xml.parsers.DocumentBuilder;", "javax.xml.parsers.DocumentBuilder", "javax.xml.parsers", "javax.xml", "javax", "parsers", "DocumentBuilder", "import javax.xml.parsers.DocumentBuilderFactory;", "javax.xml.parsers.DocumentBuilderFactory", "DocumentBuilderFactory", "import java.io.*;", "java.io", "java", "import java.nio.file.*;", "java.nio.file", "java.nio", "file", "import java.util.*;", "java.util", "util", "import static com.asiainfo.utils.XMLFilesUtils.collectXMLFiles;", "static", "com.asiainfo.utils.XMLFilesUtils.collectXMLFiles", "com.asiainfo.utils.XMLFilesUtils", "com.asiainfo.utils", "utils", "XMLFilesUtils", "collectXMLFiles", "import static com.asiainfo.utils.XMLFilesUtils.getStringFromXmlElement;", "com.asiainfo.utils.XMLFilesUtils.getStringFromXmlElement", "getStringFromXmlElement", "import org.slf4j.Logger;", "org.slf4j.Logger", "org.slf4j", "slf4j", "Logger", "import org.slf4j.LoggerFactory;", "org.slf4j.LoggerFactory", "LoggerFactory", "import com.asiainfo.cvd.service.ComponentService;", "com.asiainfo.cvd.service.ComponentService", "com.asiainfo.cvd.service", "service", "ComponentService", "import com.asiainfo.cvd.service.VulnerabilityService;", "com.asiainfo.cvd.service.VulnerabilityService", "VulnerabilityService", "public class CNVDDirectoryWatcherDaemon {\n\n    private static final Logger logger = LoggerFactory.getLogger(CNVDDirectoryWatcherDaemon.class);\n\n    // 基础目录（程序运行目录）\n    private static final String BASE_DIR = System.getProperty(\"user.dir\");\n\n    // CNVD XML文件监控目录\n    private static final String DIRECTORY_PATH = Paths.get(BASE_DIR, \"cnvd\").toString();\n\n    // 数据存储根目录\n    private static final String DATA_STORE_PATH = Paths.get(BASE_DIR, \"data_store\").toString();\n\n    // 处理状态记录文件\n    private static final String PROCESS_STATUS_FILE = Paths.get(BASE_DIR, \"process_status.json\").toString();\n\n    // JSON文件操作工具\n    private static final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);\n\n    // 扫描间隔时间（毫秒）\n    private static final long SCAN_INTERVAL = 8000;\n\n    // 组件服务\n    private static final ComponentService componentService = new ComponentService();\n    private static final VulnerabilityService vulnerabilityService = new VulnerabilityService(DATA_STORE_PATH);\n\n    /**\n     * 程序入口：启动CNVD目录监控守护进程\n     */\n    public static void main(String[] args) {\n        // 确保必要的目录存在\n        createDirectory(DIRECTORY_PATH);\n        createDirectory(DATA_STORE_PATH);\n        createDirectory(Paths.get(BASE_DIR, \"config\").toString());\n\n        logger.info(\"Base Directory: {}\", BASE_DIR);\n        logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH);\n        logger.info(\"Data Directory: {}\", DATA_STORE_PATH);\n        logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString());\n\n        TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        };\n\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL);\n\n        logger.info(\"Directory watcher started. Press Ctrl+C to exit.\");\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }\n    }\n\n    /**\n     * 检查文件是否已处理\n     */\n    private static boolean isFileProcessed(String fileName) {\n        try {\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    /**\n     * 标记文件处理状态\n     */\n    private static void markFileStatus(String fileName, String status) throws IOException {\n        File statusFile = new File(PROCESS_STATUS_FILE);\n        Map<String, String> processStatus;\n        if (statusFile.exists()) {\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        } else {\n            processStatus = new HashMap<>();\n        }\n        processStatus.put(fileName, status);\n        objectMapper.writeValue(statusFile, processStatus);\n    }\n\n    /**\n     * 高级目录扫描方法\n     */\n    private static void scanDirectory() throws Exception {\n        File directory = new File(DIRECTORY_PATH);\n        List<File> xmlFiles = new ArrayList<>();\n\n        if (directory.exists() && directory.isDirectory()) {\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }\n    }\n\n    /**\n     * 处理单个XML文件\n     */\n    private static void processXmlFile(File xmlFile) throws Exception {\n        String sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"));\n\n        if (isFileProcessed(sourceFileNameWithoutSuffix)) {\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }\n\n        try {\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        } catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }\n    }\n\n    /**\n     * 将处理异常的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */\n    private static void backupXMLFileForException(File xmlFile) throws IOException {\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup_for_exception\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        if (Files.exists(Path.of(sourcePath))) {\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }\n    }\n\n    /**\n     * 将处理完成的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */\n    private static void backupXMLFile(File xmlFile) throws IOException {\n        logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName());\n        long backupStartTime = System.currentTimeMillis();\n\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        try {\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        } catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }\n\n        long backupEndTime = System.currentTimeMillis();\n        logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0);\n    }\n\n    /**\n     * 创建目录（如果不存在）\n     *\n     * @param directory 目录路径\n     */\n    private static void createDirectory(String directory) {\n        File file = new File(directory);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }\n}", "public", "class", "CNVDDirectoryWatcherDaemon", "{\n\n    private static final Logger logger = LoggerFactory.getLogger(CNVDDirectoryWatcherDaemon.class);\n\n    // 基础目录（程序运行目录）\n    private static final String BASE_DIR = System.getProperty(\"user.dir\");\n\n    // CNVD XML文件监控目录\n    private static final String DIRECTORY_PATH = Paths.get(BASE_DIR, \"cnvd\").toString();\n\n    // 数据存储根目录\n    private static final String DATA_STORE_PATH = Paths.get(BASE_DIR, \"data_store\").toString();\n\n    // 处理状态记录文件\n    private static final String PROCESS_STATUS_FILE = Paths.get(BASE_DIR, \"process_status.json\").toString();\n\n    // JSON文件操作工具\n    private static final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);\n\n    // 扫描间隔时间（毫秒）\n    private static final long SCAN_INTERVAL = 8000;\n\n    // 组件服务\n    private static final ComponentService componentService = new ComponentService();\n    private static final VulnerabilityService vulnerabilityService = new VulnerabilityService(DATA_STORE_PATH);\n\n    /**\n     * 程序入口：启动CNVD目录监控守护进程\n     */\n    public static void main(String[] args) {\n        // 确保必要的目录存在\n        createDirectory(DIRECTORY_PATH);\n        createDirectory(DATA_STORE_PATH);\n        createDirectory(Paths.get(BASE_DIR, \"config\").toString());\n\n        logger.info(\"Base Directory: {}\", BASE_DIR);\n        logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH);\n        logger.info(\"Data Directory: {}\", DATA_STORE_PATH);\n        logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString());\n\n        TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        };\n\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL);\n\n        logger.info(\"Directory watcher started. Press Ctrl+C to exit.\");\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }\n    }\n\n    /**\n     * 检查文件是否已处理\n     */\n    private static boolean isFileProcessed(String fileName) {\n        try {\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    /**\n     * 标记文件处理状态\n     */\n    private static void markFileStatus(String fileName, String status) throws IOException {\n        File statusFile = new File(PROCESS_STATUS_FILE);\n        Map<String, String> processStatus;\n        if (statusFile.exists()) {\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        } else {\n            processStatus = new HashMap<>();\n        }\n        processStatus.put(fileName, status);\n        objectMapper.writeValue(statusFile, processStatus);\n    }\n\n    /**\n     * 高级目录扫描方法\n     */\n    private static void scanDirectory() throws Exception {\n        File directory = new File(DIRECTORY_PATH);\n        List<File> xmlFiles = new ArrayList<>();\n\n        if (directory.exists() && directory.isDirectory()) {\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }\n    }\n\n    /**\n     * 处理单个XML文件\n     */\n    private static void processXmlFile(File xmlFile) throws Exception {\n        String sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"));\n\n        if (isFileProcessed(sourceFileNameWithoutSuffix)) {\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }\n\n        try {\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        } catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }\n    }\n\n    /**\n     * 将处理异常的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */\n    private static void backupXMLFileForException(File xmlFile) throws IOException {\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup_for_exception\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        if (Files.exists(Path.of(sourcePath))) {\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }\n    }\n\n    /**\n     * 将处理完成的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */\n    private static void backupXMLFile(File xmlFile) throws IOException {\n        logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName());\n        long backupStartTime = System.currentTimeMillis();\n\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        try {\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        } catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }\n\n        long backupEndTime = System.currentTimeMillis();\n        logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0);\n    }\n\n    /**\n     * 创建目录（如果不存在）\n     *\n     * @param directory 目录路径\n     */\n    private static void createDirectory(String directory) {\n        File file = new File(directory);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }\n}", "private static final Logger logger = LoggerFactory.getLogger(CNVDDirectoryWatcherDaemon.class);", "private static final", "private", "final", "logger = LoggerFactory.getLogger(CNVDDirectoryWatcherDaemon.class)", "logger", "LoggerFactory.getLogger(CNVDDirectoryWatcherDaemon.class)", "getLogger", "(CNVDDirectoryWatcherDaemon.class)", "CNVDDirectoryWatcherDaemon.class", "// 基础目录（程序运行目录）", "private static final String BASE_DIR = System.getProperty(\"user.dir\");", "String", "BASE_DIR = System.getProperty(\"user.dir\")", "BASE_DIR", "System.getProperty(\"user.dir\")", "System", "getProperty", "(\"user.dir\")", "\"user.dir\"", "user.dir", "// CNVD XML文件监控目录", "private static final String DIRECTORY_PATH = Paths.get(BASE_DIR, \"cnvd\").toString();", "DIRECTORY_PATH = Paths.get(BASE_DIR, \"cnvd\").toString()", "DIRECTORY_PATH", "Paths.get(BASE_DIR, \"cnvd\").toString()", "Paths.get(BASE_DIR, \"cnvd\")", "Paths", "(BASE_DIR, \"cnvd\")", "\"cnvd\"", "cnvd", "toString", "// 数据存储根目录", "private static final String DATA_STORE_PATH = Paths.get(BASE_DIR, \"data_store\").toString();", "DATA_STORE_PATH = Paths.get(BASE_DIR, \"data_store\").toString()", "DATA_STORE_PATH", "Paths.get(BASE_DIR, \"data_store\").toString()", "Paths.get(BASE_DIR, \"data_store\")", "(BASE_DIR, \"data_store\")", "\"data_store\"", "data_store", "// 处理状态记录文件", "private static final String PROCESS_STATUS_FILE = Paths.get(BASE_DIR, \"process_status.json\").toString();", "PROCESS_STATUS_FILE = Paths.get(BASE_DIR, \"process_status.json\").toString()", "PROCESS_STATUS_FILE", "Paths.get(BASE_DIR, \"process_status.json\").toString()", "Paths.get(BASE_DIR, \"process_status.json\")", "(BASE_DIR, \"process_status.json\")", "\"process_status.json\"", "process_status.json", "// JSON文件操作工具", "private static final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);", "objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT)", "objectMapper", "new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT)", "new ObjectMapper()", "enable", "(SerializationFeature.INDENT_OUTPUT)", "SerializationFeature.INDENT_OUTPUT", "INDENT_OUTPUT", "// 扫描间隔时间（毫秒）", "private static final long SCAN_INTERVAL = 8000;", "long", "SCAN_INTERVAL = 8000", "SCAN_INTERVAL", "8000", "// 组件服务", "private static final ComponentService componentService = new ComponentService();", "componentService = new ComponentService()", "componentService", "new ComponentService()", "private static final VulnerabilityService vulnerabilityService = new VulnerabilityService(DATA_STORE_PATH);", "vulnerabilityService = new VulnerabilityService(DATA_STORE_PATH)", "vulnerabilityService", "new VulnerabilityService(DATA_STORE_PATH)", "(DATA_STORE_PATH)", "/**\n     * 程序入口：启动CNVD目录监控守护进程\n     */", "public static void main(String[] args) {\n        // 确保必要的目录存在\n        createDirectory(DIRECTORY_PATH);\n        createDirectory(DATA_STORE_PATH);\n        createDirectory(Paths.get(BASE_DIR, \"config\").toString());\n\n        logger.info(\"Base Directory: {}\", BASE_DIR);\n        logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH);\n        logger.info(\"Data Directory: {}\", DATA_STORE_PATH);\n        logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString());\n\n        TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        };\n\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL);\n\n        logger.info(\"Directory watcher started. Press Ctrl+C to exit.\");\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }\n    }", "public static", "void", "main", "(String[] args)", "String[] args", "String[]", "args", "{\n        // 确保必要的目录存在\n        createDirectory(DIRECTORY_PATH);\n        createDirectory(DATA_STORE_PATH);\n        createDirectory(Paths.get(BASE_DIR, \"config\").toString());\n\n        logger.info(\"Base Directory: {}\", BASE_DIR);\n        logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH);\n        logger.info(\"Data Directory: {}\", DATA_STORE_PATH);\n        logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString());\n\n        TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        };\n\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL);\n\n        logger.info(\"Directory watcher started. Press Ctrl+C to exit.\");\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }\n    }", "// 确保必要的目录存在", "createDirectory(DIRECTORY_PATH);", "createDirectory(DIRECTORY_PATH)", "createDirectory", "(DIRECTORY_PATH)", "createDirectory(DATA_STORE_PATH);", "createDirectory(DATA_STORE_PATH)", "createDirectory(Paths.get(BASE_DIR, \"config\").toString());", "createDirectory(Paths.get(BASE_DIR, \"config\").toString())", "(Paths.get(BASE_DIR, \"config\").toString())", "Paths.get(BASE_DIR, \"config\").toString()", "Paths.get(BASE_DIR, \"config\")", "(BASE_DIR, \"config\")", "\"config\"", "config", "logger.info(\"Base Directory: {}\", BASE_DIR);", "logger.info(\"Base Directory: {}\", BASE_DIR)", "info", "(\"Base Directory: {}\", BASE_DIR)", "\"Base Directory: {}\"", "Base Directory: {}", "logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH);", "logger.info(\"CNVD XML Directory: {}\", DIRECTORY_PATH)", "(\"CNVD XML Directory: {}\", DIRECTORY_PATH)", "\"CNVD XML Directory: {}\"", "CNVD XML Directory: {}", "logger.info(\"Data Directory: {}\", DATA_STORE_PATH);", "logger.info(\"Data Directory: {}\", DATA_STORE_PATH)", "(\"Data Directory: {}\", DATA_STORE_PATH)", "\"Data Directory: {}\"", "Data Directory: {}", "logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString());", "logger.info(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString())", "(\"Config Directory: {}\", Paths.get(BASE_DIR, \"config\").toString())", "\"Config Directory: {}\"", "Config Directory: {}", "TimerTask task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        };", "TimerTask", "task = new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        }", "task", "new TimerTask() {\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        }", "{\n            @Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }\n        }", "@Override\n            public void run() {\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }", "@Override\n            public", "@Override", "Override", "{\n                logger.info(\"Start Scan Directory ...\");\n                try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }\n            }", "logger.info(\"Start Scan Directory ...\");", "logger.info(\"Start Scan Directory ...\")", "(\"Start Scan Directory ...\")", "\"Start Scan Directory ...\"", "Start Scan Directory ...", "try {\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                } catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }", "{\n                    long startTime = System.currentTimeMillis();\n                    scanDirectory();\n                    logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);\n                }", "long startTime = System.currentTimeMillis();", "startTime = System.currentTimeMillis()", "startTime", "System.currentTimeMillis()", "scanDirectory();", "scanDirectory()", "scanDirectory", "logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0);", "logger.info(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0)", "(\"Scan Directory execution time: {} seconds\", (System.currentTimeMillis() - startTime) / 1000.0)", "catch (Exception e) {\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }", "catch", "Exception e", "Exception", "{\n                    logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);\n                }", "logger.error(\"Error in scanning directory: {}\", e.getMessage(), e);", "logger.error(\"Error in scanning directory: {}\", e.getMessage(), e)", "Timer timer = new Timer(true);", "Timer", "timer = new Timer(true)", "timer", "new Timer(true)", "(true)", "true", "timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL);", "timer.scheduleAtFixedRate(task, 0, SCAN_INTERVAL)", "scheduleAtFixedRate", "(task, 0, SCAN_INTERVAL)", "logger.info(\"Directory watcher started. Press Ctrl+C to exit.\");", "logger.info(\"Directory watcher started. Press Ctrl+C to exit.\")", "(\"Directory watcher started. Press Ctrl+C to exit.\")", "\"Directory watcher started. Press Ctrl+C to exit.\"", "Directory watcher started. Press Ctrl+C to exit.", "try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }", "{\n            Thread.currentThread().join();\n        }", "Thread.currentThread().join();", "Thread.currentThread().join()", "Thread.currentThread()", "Thread", "currentThread", "join", "catch (InterruptedException e) {\n            logger.error(\"Thread interrupted\", e);\n        }", "InterruptedException e", "InterruptedException", "{\n            logger.error(\"Thread interrupted\", e);\n        }", "logger.error(\"Thread interrupted\", e);", "logger.error(\"Thread interrupted\", e)", "error", "(\"Thread interrupted\", e)", "\"Thread interrupted\"", "Thread interrupted", "/**\n     * 检查文件是否已处理\n     */", "private static boolean isFileProcessed(String fileName) {\n        try {\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        } catch (IOException e) {\n            return false;\n        }\n    }", "private static", "boolean", "isFileProcessed", "(String fileName)", "String fileName", "fileName", "{\n        try {\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        } catch (IOException e) {\n            return false;\n        }\n    }", "try {\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        } catch (IOException e) {\n            return false;\n        }", "{\n            File statusFile = new File(PROCESS_STATUS_FILE);\n            if (!statusFile.exists()) {\n                return false;\n            }\n            Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n            return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));\n        }", "File statusFile = new File(PROCESS_STATUS_FILE);", "File", "statusFile = new File(PROCESS_STATUS_FILE)", "statusFile", "new File(PROCESS_STATUS_FILE)", "(PROCESS_STATUS_FILE)", "if (!statusFile.exists()) {\n                return false;\n            }", "(!statusFile.exists())", "!statusFile.exists()", "statusFile.exists()", "exists", "{\n                return false;\n            }", "return false;", "return", "false", "Map<String, String> processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));", "Map<String, String>", "<String, String>", "processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class))", "processStatus", "objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class))", "readValue", "(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class))", "objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class)", "objectMapper.getTypeFactory()", "getTypeFactory", "constructMapType", "(Map.class, String.class, String.class)", "Map.class", "String.class", "return processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName));", "processStatus.containsKey(fileName) && \"PROCESSED\".equals(processStatus.get(fileName))", "processStatus.containsKey(fileName)", "containsKey", "(fileName)", "\"PROCESSED\".equals(processStatus.get(fileName))", "\"PROCESSED\"", "PROCESSED", "equals", "(processStatus.get(fileName))", "processStatus.get(fileName)", "catch (IOException e) {\n            return false;\n        }", "IOException e", "IOException", "{\n            return false;\n        }", "/**\n     * 标记文件处理状态\n     */", "private static void markFileStatus(String fileName, String status) throws IOException {\n        File statusFile = new File(PROCESS_STATUS_FILE);\n        Map<String, String> processStatus;\n        if (statusFile.exists()) {\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        } else {\n            processStatus = new HashMap<>();\n        }\n        processStatus.put(fileName, status);\n        objectMapper.writeValue(statusFile, processStatus);\n    }", "markFileStatus", "(String fileName, String status)", "String status", "status", "throws IOException", "throws", "{\n        File statusFile = new File(PROCESS_STATUS_FILE);\n        Map<String, String> processStatus;\n        if (statusFile.exists()) {\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        } else {\n            processStatus = new HashMap<>();\n        }\n        processStatus.put(fileName, status);\n        objectMapper.writeValue(statusFile, processStatus);\n    }", "Map<String, String> processStatus;", "if (statusFile.exists()) {\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        } else {\n            processStatus = new HashMap<>();\n        }", "(statusFile.exists())", "{\n            processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));\n        }", "processStatus = objectMapper.readValue(statusFile,\n                    objectMapper.getTypeFactory().constructMapType(Map.class, String.class, String.class));", "else", "{\n            processStatus = new HashMap<>();\n        }", "processStatus = new HashMap<>();", "processStatus = new HashMap<>()", "new HashMap<>()", "HashMap<>", "HashMap", "processStatus.put(fileName, status);", "processStatus.put(fileName, status)", "(fileName, status)", "objectMapper.writeValue(statusFile, processStatus);", "objectMapper.writeValue(statusFile, processStatus)", "writeValue", "(statusFile, processStatus)", "/**\n     * 高级目录扫描方法\n     */", "private static void scanDirectory() throws Exception {\n        File directory = new File(DIRECTORY_PATH);\n        List<File> xmlFiles = new ArrayList<>();\n\n        if (directory.exists() && directory.isDirectory()) {\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }\n    }", "throws Exception", "{\n        File directory = new File(DIRECTORY_PATH);\n        List<File> xmlFiles = new ArrayList<>();\n\n        if (directory.exists() && directory.isDirectory()) {\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }\n    }", "File directory = new File(DIRECTORY_PATH);", "directory = new File(DIRECTORY_PATH)", "directory", "new File(DIRECTORY_PATH)", "List<File> xmlFiles = new ArrayList<>();", "List<File>", "List", "<File>", "xmlFiles = new ArrayList<>()", "xmlFiles", "new ArrayList<>()", "ArrayList<>", "ArrayList", "if (directory.exists() && directory.isDirectory()) {\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }", "(directory.exists() && directory.isDirectory())", "directory.exists() && directory.isDirectory()", "directory.exists()", "directory.isDirectory()", "isDirectory", "{\n            collectXMLFiles(directory, xmlFiles);\n            for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n        }", "collectXMLFiles(directory, xmlFiles);", "collectXMLFiles(directory, xmlFiles)", "(directory, xmlFiles)", "for (File xmlFile : xmlFiles) {\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }", "xmlFile", "{\n                logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());\n                long startTime = System.currentTimeMillis();\n                processXmlFile(xmlFile);\n                logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }", "logger.info(\"Start Process XML file: {} ...\", xmlFile.getName());", "logger.info(\"Start Process XML file: {} ...\", xmlFile.getName())", "(\"Start Process XML file: {} ...\", xmlFile.getName())", "\"Start Process XML file: {} ...\"", "Start Process XML file: {} ...", "xmlFile.getName()", "getName", "currentTimeMillis", "processXmlFile(xmlFile);", "processXmlFile(xmlFile)", "processXmlFile", "(xmlFile)", "logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));", "logger.info(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0))", "(\"Process XML file successfully: {}, execution time: {}\", xmlFile.getName(), String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0))", "\"Process XML file successfully: {}, execution time: {}\"", "Process XML file successfully: {}, execution time: {}", "String.format(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0)", "format", "(\"%.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0)", "\"%.2f seconds\"", "%.2f seconds", "(System.currentTimeMillis() - startTime) / 1000.0", "(System.currentTimeMillis() - startTime)", "1000.0", "/**\n     * 处理单个XML文件\n     */", "private static void processXmlFile(File xmlFile) throws Exception {\n        String sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"));\n\n        if (isFileProcessed(sourceFileNameWithoutSuffix)) {\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }\n\n        try {\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        } catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }\n    }", "(File xmlFile)", "File xmlFile", "{\n        String sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"));\n\n        if (isFileProcessed(sourceFileNameWithoutSuffix)) {\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }\n\n        try {\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        } catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }\n    }", "String sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"));", "sourceFileNameWithoutSuffix = xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"))", "sourceFileNameWithoutSuffix", "xmlFile.getName().substring(0, xmlFile.getName().lastIndexOf(\".\"))", "substring", "(0, xmlFile.getName().lastIndexOf(\".\"))", "xmlFile.getName().lastIndexOf(\".\")", "lastIndexOf", "(\".\")", "if (isFileProcessed(sourceFileNameWithoutSuffix)) {\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }", "(isFileProcessed(sourceFileNameWithoutSuffix))", "isFileProcessed(sourceFileNameWithoutSuffix)", "(sourceFileNameWithoutSuffix)", "{\n            logger.info(\"File already processed: {}\", xmlFile.getName());\n            backupXMLFile(xmlFile);\n            return;\n        }", "logger.info(\"File already processed: {}\", xmlFile.getName());", "logger.info(\"File already processed: {}\", xmlFile.getName())", "(\"File already processed: {}\", xmlFile.getName())", "\"File already processed: {}\"", "File already processed: {}", "backupXMLFile(xmlFile);", "backupXMLFile(xmlFile)", "backupXMLFile", "return;", "try {\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        } catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }", "{\n            // 解析XML文档\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            Document doc = db.parse(xmlFile);\n\n            List<BoVulnerability> vulnerabilities = new ArrayList<>();\n            List<BoVulnerabilityCve> cves = new ArrayList<>();\n            List<BoVulnerabilityProduct> products = new ArrayList<>();\n\n            // 解析XML文档中的漏洞信息\n            NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");\n\n            for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }\n\n            if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }\n\n            // 使用VulnerabilityService保存数据\n            vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);\n\n            // 生成预警信息\n            VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();\n            alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);\n\n            List<VulnerabilityAlert> alertList = new ArrayList<>();\n            List<BoComponent> components = componentService.readComponentsFromExcel();\n\n            for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }\n\n            alertList = vulnerabilityService.eliminateDuplicate(alertList);\n\n            if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }\n\n            logger.info(\"File processed successfully: {}\", xmlFile.getName());\n\n            markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");\n            backupXMLFile(xmlFile);\n\n        }", "// 解析XML文档", "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();", "dbf = DocumentBuilderFactory.newInstance()", "DocumentBuilderFactory.newInstance()", "newInstance", "DocumentBuilder db = dbf.newDocumentBuilder();", "db = dbf.newDocumentBuilder()", "dbf.newDocumentBuilder()", "newDocumentBuilder", "Document doc = db.parse(xmlFile);", "doc = db.parse(xmlFile)", "db.parse(xmlFile)", "parse", "List<BoVulnerability> vulnerabilities = new ArrayList<>();", "List<BoVulnerability>", "<BoVulnerability>", "BoVulnerability", "vulnerabilities = new ArrayList<>()", "vulnerabilities", "List<BoVulnerabilityCve> cves = new ArrayList<>();", "List<BoVulnerabilityCve>", "<BoVulnerabilityCve>", "BoVulnerabilityCve", "cves = new ArrayList<>()", "cves", "List<BoVulnerabilityProduct> products = new ArrayList<>();", "List<BoVulnerabilityProduct>", "<BoVulnerabilityProduct>", "BoVulnerabilityProduct", "products = new ArrayList<>()", "products", "// 解析XML文档中的漏洞信息", "NodeList vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\");", "vulnerabilitiesNodeList = doc.getElementsByTagName(\"vulnerability\")", "vulnerabilitiesNodeList", "doc.getElementsByTagName(\"vulnerability\")", "getElementsByTagName", "(\"vulnerability\")", "\"vulnerability\"", "vulnerability", "for (int i = 0; i < vulnerabilitiesNodeList.getLength(); i++) {\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }", "int i = 0;", "i = 0", "i < vulnerabilitiesNodeList.getLength()", "vulnerabilitiesNodeList.getLength()", "getLength", "{\n                Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);\n\n                // 提取漏洞基本信息\n                String number = getStringFromXmlElement(vulnerability, \"number\");\n                String title = getStringFromXmlElement(vulnerability, \"title\");\n                String serverity = getStringFromXmlElement(vulnerability, \"serverity\");\n                String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");\n                String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");\n                String openTime = getStringFromXmlElement(vulnerability, \"openTime\");\n                String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");\n                String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");\n                String description = getStringFromXmlElement(vulnerability, \"description\");\n                String patchName = getStringFromXmlElement(vulnerability, \"patchName\");\n                String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");\n\n                // 赋值BoVulnerability\n                BoVulnerability boVulnerability = new BoVulnerability();\n                boVulnerability.setFileName(sourceFileNameWithoutSuffix);\n                boVulnerability.setNumber(number);\n                boVulnerability.setTitle(title);\n                boVulnerability.setServerity(serverity);\n                boVulnerability.setIsEvent(isEvent);\n                boVulnerability.setSubmitTime(submitTime);\n                boVulnerability.setOpenTime(openTime);\n                boVulnerability.setReferenceLink(referenceLink);\n                boVulnerability.setFormalWay(formalWay);\n                boVulnerability.setDescription(description);\n                boVulnerability.setPatchName(patchName);\n                boVulnerability.setPatchDescription(patchDescription);\n\n                vulnerabilities.add(boVulnerability);\n\n                // 提取CVE关联信息\n                NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");\n                for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }\n\n                // 提取受影响的产品信息\n                NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");\n                for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }\n            }", "Element vulnerability = (Element) vulnerabilitiesNodeList.item(i);", "vulnerability = (Element) vulnerabilitiesNodeList.item(i)", "(Element) vulnerabilitiesNodeList.item(i)", "vulnerabilitiesNodeList.item(i)", "item", "// 提取漏洞基本信息", "String number = getStringFromXmlElement(vulnerability, \"number\");", "number = getStringFromXmlElement(vulnerability, \"number\")", "number", "getStringFromXmlElement(vulnerability, \"number\")", "(vulnerability, \"number\")", "\"number\"", "String title = getStringFromXmlElement(vulnerability, \"title\");", "title = getStringFromXmlElement(vulnerability, \"title\")", "title", "getStringFromXmlElement(vulnerability, \"title\")", "(vulnerability, \"title\")", "\"title\"", "String serverity = getStringFromXmlElement(vulnerability, \"serverity\");", "serverity = getStringFromXmlElement(vulnerability, \"serverity\")", "serverity", "getStringFromXmlElement(vulnerability, \"serverity\")", "(vulnerability, \"serverity\")", "\"serverity\"", "String isEvent = getStringFromXmlElement(vulnerability, \"isEvent\");", "isEvent = getStringFromXmlElement(vulnerability, \"isEvent\")", "isEvent", "getStringFromXmlElement(vulnerability, \"isEvent\")", "(vulnerability, \"isEvent\")", "\"isEvent\"", "String submitTime = getStringFromXmlElement(vulnerability, \"submitTime\");", "submitTime = getStringFromXmlElement(vulnerability, \"submitTime\")", "submitTime", "getStringFromXmlElement(vulnerability, \"submitTime\")", "(vulnerability, \"submitTime\")", "\"submitTime\"", "String openTime = getStringFromXmlElement(vulnerability, \"openTime\");", "openTime = getStringFromXmlElement(vulnerability, \"openTime\")", "openTime", "getStringFromXmlElement(vulnerability, \"openTime\")", "(vulnerability, \"openTime\")", "\"openTime\"", "String referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\");", "referenceLink = getStringFromXmlElement(vulnerability, \"referenceLink\")", "referenceLink", "getStringFromXmlElement(vulnerability, \"referenceLink\")", "(vulnerability, \"referenceLink\")", "\"referenceLink\"", "String formalWay = getStringFromXmlElement(vulnerability, \"formalWay\");", "formalWay = getStringFromXmlElement(vulnerability, \"formalWay\")", "formalWay", "getStringFromXmlElement(vulnerability, \"formalWay\")", "(vulnerability, \"formalWay\")", "\"formalWay\"", "String description = getStringFromXmlElement(vulnerability, \"description\");", "description = getStringFromXmlElement(vulnerability, \"description\")", "description", "getStringFromXmlElement(vulnerability, \"description\")", "(vulnerability, \"description\")", "\"description\"", "String patchName = getStringFromXmlElement(vulnerability, \"patchName\");", "patchName = getStringFromXmlElement(vulnerability, \"patchName\")", "patchName", "getStringFromXmlElement(vulnerability, \"patchName\")", "(vulnerability, \"patchName\")", "\"patchName\"", "String patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\");", "patchDescription = getStringFromXmlElement(vulnerability, \"patchDescription\")", "patchDescription", "getStringFromXmlElement(vulnerability, \"patchDescription\")", "(vulnerability, \"patchDescription\")", "\"patchDescription\"", "// 赋值BoVulnerability", "BoVulnerability boVulnerability = new BoVulnerability();", "boVulnerability = new BoVulnerability()", "boVulnerability", "new BoVulnerability()", "boVulnerability.setFileName(sourceFileNameWithoutSuffix);", "boVulnerability.setFileName(sourceFileNameWithoutSuffix)", "setFileName", "boVulnerability.setNumber(number);", "boVulnerability.setNumber(number)", "setNumber", "(number)", "boVulnerability.setTitle(title);", "boVulnerability.setTitle(title)", "setTitle", "(title)", "boVulnerability.setServerity(serverity);", "boVulnerability.setServerity(serverity)", "setServerity", "(serverity)", "boVulnerability.setIsEvent(isEvent);", "boVulnerability.setIsEvent(isEvent)", "setIsEvent", "(isEvent)", "boVulnerability.setSubmitTime(submitTime);", "boVulnerability.setSubmitTime(submitTime)", "setSubmitTime", "(submitTime)", "boVulnerability.setOpenTime(openTime);", "boVulnerability.setOpenTime(openTime)", "setOpenTime", "(openTime)", "boVulnerability.setReferenceLink(referenceLink);", "boVulnerability.setReferenceLink(referenceLink)", "setReferenceLink", "(referenceLink)", "boVulnerability.setFormalWay(formalWay);", "boVulnerability.setFormalWay(formalWay)", "setFormalWay", "(formalWay)", "boVulnerability.setDescription(description);", "boVulnerability.setDescription(description)", "setDescription", "(description)", "boVulnerability.setPatchName(patchName);", "boVulnerability.setPatchName(patchName)", "setPatchName", "(patchName)", "boVulnerability.setPatchDescription(patchDescription);", "boVulnerability.setPatchDescription(patchDescription)", "setPatchDescription", "(patchDescription)", "vulnerabilities.add(boVulnerability);", "vulnerabilities.add(boVulnerability)", "(boVulnerability)", "// 提取CVE关联信息", "NodeList cvesNodeList = vulnerability.getElementsByTagName(\"cve\");", "cvesNodeList = vulnerability.getElementsByTagName(\"cve\")", "cvesNodeList", "vulnerability.getElementsByTagName(\"cve\")", "(\"cve\")", "\"cve\"", "for (int j = 0; j < cvesNodeList.getLength(); j++) {\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }", "int j = 0;", "j = 0", "j < cvesNodeList.getLength()", "cvesNodeList.getLength()", "{\n                    Element cve = (Element) cvesNodeList.item(j);\n                    String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");\n                    String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");\n\n                    BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();\n                    boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityCve.setCnvdNumber(number);\n                    boVulnerabilityCve.setCveNumber(cveNumber);\n                    boVulnerabilityCve.setCveUrl(cveUrl);\n                    cves.add(boVulnerabilityCve);\n                }", "Element cve = (Element) cvesNodeList.item(j);", "cve = (Element) cvesNodeList.item(j)", "(Element) cvesNodeList.item(j)", "cvesNodeList.item(j)", "String cveNumber = getStringFromXmlElement(cve, \"cveNumber\");", "cveNumber = getStringFromXmlElement(cve, \"cveNumber\")", "cveNumber", "getStringFromXmlElement(cve, \"cveNumber\")", "(cve, \"cveNumber\")", "\"cveNumber\"", "String cveUrl = getStringFromXmlElement(cve, \"cveUrl\");", "cveUrl = getStringFromXmlElement(cve, \"cveUrl\")", "cveUrl", "getStringFromXmlElement(cve, \"cveUrl\")", "(cve, \"cveUrl\")", "\"cveUrl\"", "BoVulnerabilityCve boVulnerabilityCve = new BoVulnerabilityCve();", "boVulnerabilityCve = new BoVulnerabilityCve()", "boVulnerabilityCve", "new BoVulnerabilityCve()", "boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix);", "boVulnerabilityCve.setFileName(sourceFileNameWithoutSuffix)", "boVulnerabilityCve.setCnvdNumber(number);", "boVulnerabilityCve.setCnvdNumber(number)", "setCnvdNumber", "boVulnerabilityCve.setCveNumber(cveNumber);", "boVulnerabilityCve.setCveNumber(cveNumber)", "setCveNumber", "(cveNumber)", "boVulnerabilityCve.setCveUrl(cveUrl);", "boVulnerabilityCve.setCveUrl(cveUrl)", "setCveUrl", "(cveUrl)", "cves.add(boVulnerabilityCve);", "cves.add(boVulnerabilityCve)", "(boVulnerabilityCve)", "// 提取受影响的产品信息", "NodeList productsNodeList = vulnerability.getElementsByTagName(\"product\");", "productsNodeList = vulnerability.getElementsByTagName(\"product\")", "productsNodeList", "vulnerability.getElementsByTagName(\"product\")", "(\"product\")", "\"product\"", "product", "for (int k = 0; k < productsNodeList.getLength(); k++) {\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }", "int k = 0;", "k = 0", "k < productsNodeList.getLength()", "productsNodeList.getLength()", "{\n                    Element product = (Element) productsNodeList.item(k);\n                    String name = product.getTextContent();\n\n                    BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();\n                    boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);\n                    boVulnerabilityProduct.setCnvdNumber(number);\n                    boVulnerabilityProduct.setProduct(name);\n                    products.add(boVulnerabilityProduct);\n                }", "Element product = (Element) productsNodeList.item(k);", "product = (Element) productsNodeList.item(k)", "(Element) productsNodeList.item(k)", "productsNodeList.item(k)", "String name = product.getTextContent();", "name = product.getTextContent()", "name", "product.getTextContent()", "getTextContent", "BoVulnerabilityProduct boVulnerabilityProduct = new BoVulnerabilityProduct();", "boVulnerabilityProduct = new BoVulnerabilityProduct()", "boVulnerabilityProduct", "new BoVulnerabilityProduct()", "boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix);", "boVulnerabilityProduct.setFileName(sourceFileNameWithoutSuffix)", "boVulnerabilityProduct.setCnvdNumber(number);", "boVulnerabilityProduct.setCnvdNumber(number)", "boVulnerabilityProduct.setProduct(name);", "boVulnerabilityProduct.setProduct(name)", "setProduct", "(name)", "products.add(boVulnerabilityProduct);", "products.add(boVulnerabilityProduct)", "(boVulnerabilityProduct)", "if (vulnerabilities.isEmpty()) {\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }", "(vulnerabilities.isEmpty())", "vulnerabilities.isEmpty()", "isEmpty", "{\n                logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());\n                backupXMLFileForException(xmlFile);\n                return;\n            }", "logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName());", "logger.warn(\"No vulnerabilities found in file: {}\", xmlFile.getName())", "warn", "(\"No vulnerabilities found in file: {}\", xmlFile.getName())", "\"No vulnerabilities found in file: {}\"", "No vulnerabilities found in file: {}", "backupXMLFileForException(xmlFile);", "backupXMLFileForException(xmlFile)", "backupXMLFileForException", "// 使用VulnerabilityService保存数据", "vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products);", "vulnerabilityService.saveVulnerabilityData(sourceFileNameWithoutSuffix, vulnerabilities, cves, products)", "saveVulnerabilityData", "(sourceFileNameWithoutSuffix, vulnerabilities, cves, products)", "// 生成预警信息", "VulnerabilityAlertBrief alertBrief = new VulnerabilityAlertBrief();", "VulnerabilityAlertBrief", "alertBrief = new VulnerabilityAlertBrief()", "alertBrief", "new VulnerabilityAlertBrief()", "alertBrief.setReportingCycle(sourceFileNameWithoutSuffix);", "alertBrief.setReportingCycle(sourceFileNameWithoutSuffix)", "setReportingCycle", "List<VulnerabilityAlert> alertList = new ArrayList<>();", "List<VulnerabilityAlert>", "<VulnerabilityAlert>", "VulnerabilityAlert", "alertList = new ArrayList<>()", "alertList", "List<BoComponent> components = componentService.readComponentsFromExcel();", "List<BoComponent>", "<BoComponent>", "BoComponent", "components = componentService.readComponentsFromExcel()", "components", "componentService.readComponentsFromExcel()", "readComponentsFromExcel", "for (BoComponent component : components) {\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }", "component", "{\n                List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());\n                for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }\n            }", "List<String> filterNames = componentService.readComponentFilterNameList(component.getComponentName());", "List<String>", "<String>", "filterNames = componentService.readComponentFilterNameList(component.getComponentName())", "filterNames", "componentService.readComponentFilterNameList(component.getComponentName())", "readComponentFilterNameList", "(component.getComponentName())", "component.getComponentName()", "getComponentName", "for (String filterName : filterNames) {\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }", "filterName", "{\n                    // 使用VulnerabilityService查询产品列表\n                    List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);\n\n                    //vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);\n\n                    for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }\n                }", "// 使用VulnerabilityService查询产品列表", "List<BoVulnerabilityProduct> boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName);", "boVulnerabilityProductList2 = vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName)", "boVulnerabilityProductList2", "vulnerabilityService.readVulnerabilityProducts(sourceFileNameWithoutSuffix, filterName)", "readVulnerabilityProducts", "(sourceFileNameWithoutSuffix, filterName)", "//vulnerabilityService.printBoVulnerabilityProductList(sourceFileNameWithoutSuffix, boVulnerabilityProductList2);", "for (BoVulnerabilityProduct boVulnerabilityProduct : boVulnerabilityProductList2) {\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }", "{\n                        BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());\n\n                        VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();\n                        vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);\n                        vulnerabilityAlert.setTitle(boVulnerability.getTitle());\n                        alertBrief.appendComponent(component.getComponentName());\n                        vulnerabilityAlert.setComponent(component.getComponentName());\n                        vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());\n                        vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));\n                        vulnerabilityAlert.setDescription(boVulnerability.getDescription());\n                        vulnerabilityAlert.setSeverity(boVulnerability.getServerity());\n                        vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());\n                        vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());\n                        vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());\n\n                        alertList.add(vulnerabilityAlert);\n                    }", "BoVulnerability boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber());", "boVulnerability =\n                                vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber())", "vulnerabilityService.readVulnerability(sourceFileNameWithoutSuffix, boVulnerabilityProduct.getCnvdNumber())", "VulnerabilityAlert vulnerabilityAlert = new VulnerabilityAlert();", "vulnerabilityAlert = new VulnerabilityAlert()", "vulnerabilityAlert", "new VulnerabilityAlert()", "vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix);", "vulnerabilityAlert.setSourceFileNameWithoutSuffix(sourceFileNameWithoutSuffix)", "setSourceFileNameWithoutSuffix", "vulnerabilityAlert.setTitle(boVulnerability.getTitle());", "vulnerabilityAlert.setTitle(boVulnerability.getTitle())", "(boVulnerability.getTitle())", "alertBrief.appendComponent(component.getComponentName());", "alertBrief.appendComponent(component.getComponentName())", "appendComponent", "vulnerabilityAlert.setComponent(component.getComponentName());", "vulnerabilityAlert.setComponent(component.getComponentName())", "setComponent", "vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber());", "vulnerabilityAlert.setCnvdNumber(boVulnerability.getNumber())", "(boVulnerability.getNumber())", "vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()));", "vulnerabilityAlert.setCveNumber(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()))", "(vulnerabilityService.vulnerabilityCveJoin(cves, boVulnerability.getNumber()))", "vulnerabilityAlert.setDescription(boVulnerability.getDescription());", "vulnerabilityAlert.setDescription(boVulnerability.getDescription())", "(boVulnerability.getDescription())", "vulnerabilityAlert.setSeverity(boVulnerability.getServerity());", "vulnerabilityAlert.setSeverity(boVulnerability.getServerity())", "setSeverity", "(boVulnerability.getServerity())", "vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime());", "vulnerabilityAlert.setOpenTime(boVulnerability.getOpenTime())", "(boVulnerability.getOpenTime())", "vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct());", "vulnerabilityAlert.setAffectedVersion(boVulnerabilityProduct.getProduct())", "setAffectedVersion", "(boVulnerabilityProduct.getProduct())", "vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay());", "vulnerabilityAlert.setRemediationAdvice(boVulnerability.getFormalWay())", "setRemediationAdvice", "(boVulnerability.getFormalWay())", "alertList.add(vulnerabilityAlert);", "alertList.add(vulnerabilityAlert)", "(vulnerabilityAlert)", "alertList = vulnerabilityService.eliminateDuplicate(alertList);", "alertList = vulnerabilityService.eliminateDuplicate(alertList)", "vulnerabilityService.eliminateDuplicate(alertList)", "eliminateDuplicate", "(alertList)", "if (!alertList.isEmpty()) {\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }", "(!alertList.isEmpty())", "!alertList.isEmpty()", "alertList.isEmpty()", "{\n                logger.info(\"Start Process Notification Email ...\");\n                long startTime = System.currentTimeMillis();\n                NotificationEmailProcessor.process(alertBrief, alertList);\n                logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));\n            }", "logger.info(\"Start Process Notification Email ...\");", "logger.info(\"Start Process Notification Email ...\")", "(\"Start Process Notification Email ...\")", "\"Start Process Notification Email ...\"", "Start Process Notification Email ...", "NotificationEmailProcessor.process(alertBrief, alertList);", "NotificationEmailProcessor.process(alertBrief, alertList)", "NotificationEmailProcessor", "process", "(alertBrief, alertList)", "logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0));", "logger.info(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0))", "(String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0))", "String.format(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0)", "(\"Process Notification Email successfully: %.2f seconds\", (System.currentTimeMillis() - startTime) / 1000.0)", "\"Process Notification Email successfully: %.2f seconds\"", "Process Notification Email successfully: %.2f seconds", "logger.info(\"File processed successfully: {}\", xmlFile.getName());", "logger.info(\"File processed successfully: {}\", xmlFile.getName())", "(\"File processed successfully: {}\", xmlFile.getName())", "\"File processed successfully: {}\"", "File processed successfully: {}", "markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\");", "markFileStatus(sourceFileNameWithoutSuffix, \"PROCESSED\")", "(sourceFileNameWithoutSuffix, \"PROCESSED\")", "catch (Exception e) {\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }", "{\n            logger.error(\"Error processing file: {}\", xmlFile.getName(), e);\n            markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");\n            backupXMLFileForException(xmlFile);\n        }", "logger.error(\"Error processing file: {}\", xmlFile.getName(), e);", "logger.error(\"Error processing file: {}\", xmlFile.getName(), e)", "(\"Error processing file: {}\", xmlFile.getName(), e)", "\"Error processing file: {}\"", "Error processing file: {}", "markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\");", "markFileStatus(sourceFileNameWithoutSuffix, \"FAILED\")", "(sourceFileNameWithoutSuffix, \"FAILED\")", "\"FAILED\"", "FAILED", "/**\n     * 将处理异常的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */", "private static void backupXMLFileForException(File xmlFile) throws IOException {\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup_for_exception\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        if (Files.exists(Path.of(sourcePath))) {\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }\n    }", "{\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup_for_exception\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        if (Files.exists(Path.of(sourcePath))) {\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }\n    }", "String sourceDirectory = xmlFile.getParent();", "sourceDirectory = xmlFile.getParent()", "sourceDirectory", "xmlFile.getParent()", "getParent", "String sourceFileName = xmlFile.getName();", "sourceFileName = xmlFile.getName()", "sourceFileName", "String sourcePath = xmlFile.getAbsolutePath();", "sourcePath = xmlFile.getAbsolutePath()", "sourcePath", "xmlFile.getAbsolutePath()", "getAbsolutePath", "String backupDirectory = sourceDirectory + \"/backup_for_exception\";", "backupDirectory = sourceDirectory + \"/backup_for_exception\"", "backupDirectory", "sourceDirectory + \"/backup_for_exception\"", "\"/backup_for_exception\"", "/backup_for_exception", "createDirectory(backupDirectory);", "createDirectory(backupDirectory)", "(backupDirectory)", "String backupPath = backupDirectory + \"/\" + sourceFileName;", "backupPath = backupDirectory + \"/\" + sourceFileName", "backupPath", "backupDirectory + \"/\" + sourceFileName", "backupDirectory + \"/\"", "if (Files.exists(Path.of(sourcePath))) {\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }", "(Files.exists(Path.of(sourcePath)))", "Files.exists(Path.of(sourcePath))", "Files", "(Path.of(sourcePath))", "Path.of(sourcePath)", "Path", "(sourcePath)", "{\n            Files.move(Path.of(sourcePath), Path.of(backupPath));\n            logger.info(\"Backup file for exception successfully: {}\", sourceFileName);\n        }", "Files.move(Path.of(sourcePath), Path.of(backupPath));", "Files.move(Path.of(sourcePath), Path.of(backupPath))", "move", "(Path.of(sourcePath), Path.of(backupPath))", "Path.of(backupPath)", "(backupPath)", "logger.info(\"Backup file for exception successfully: {}\", sourceFileName);", "logger.info(\"Backup file for exception successfully: {}\", sourceFileName)", "(\"Backup file for exception successfully: {}\", sourceFileName)", "\"Backup file for exception successfully: {}\"", "Backup file for exception successfully: {}", "/**\n     * 将处理完成的XML文件备份到指定目录\n     *\n     * @param xmlFile 需要备份的XML文件\n     * @throws IOException IO异常\n     */", "private static void backupXMLFile(File xmlFile) throws IOException {\n        logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName());\n        long backupStartTime = System.currentTimeMillis();\n\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        try {\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        } catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }\n\n        long backupEndTime = System.currentTimeMillis();\n        logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0);\n    }", "{\n        logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName());\n        long backupStartTime = System.currentTimeMillis();\n\n        String sourceDirectory = xmlFile.getParent();\n        String sourceFileName = xmlFile.getName();\n        String sourcePath = xmlFile.getAbsolutePath();\n        String backupDirectory = sourceDirectory + \"/backup\";\n        createDirectory(backupDirectory);\n        String backupPath = backupDirectory + \"/\" + sourceFileName;\n\n        try {\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        } catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }\n\n        long backupEndTime = System.currentTimeMillis();\n        logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0);\n    }", "logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName());", "logger.info(\"Start Backup XML File: {} ...\", xmlFile.getName())", "(\"Start Backup XML File: {} ...\", xmlFile.getName())", "\"Start Backup XML File: {} ...\"", "Start Backup XML File: {} ...", "long backupStartTime = System.currentTimeMillis();", "backupStartTime = System.currentTimeMillis()", "backupStartTime", "String backupDirectory = sourceDirectory + \"/backup\";", "backupDirectory = sourceDirectory + \"/backup\"", "sourceDirectory + \"/backup\"", "\"/backup\"", "/backup", "try {\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        } catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }", "{\n            if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }\n        }", "if (Files.exists(Path.of(sourcePath))) {\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }", "{\n                Files.move(Path.of(sourcePath), Path.of(backupPath));\n                logger.info(\"Backup XML file successfully: {}\", sourceFileName);\n            }", "logger.info(\"Backup XML file successfully: {}\", sourceFileName);", "logger.info(\"Backup XML file successfully: {}\", sourceFileName)", "(\"Backup XML file successfully: {}\", sourceFileName)", "\"Backup XML file successfully: {}\"", "Backup XML file successfully: {}", "catch (Exception e) {\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }", "{\n            logger.error(\"Backup XML file failed: {}\", sourceFileName, e);\n            return;\n        }", "logger.error(\"Backup XML file failed: {}\", sourceFileName, e);", "logger.error(\"Backup XML file failed: {}\", sourceFileName, e)", "(\"Backup XML file failed: {}\", sourceFileName, e)", "\"Backup XML file failed: {}\"", "Backup XML file failed: {}", "long backupEndTime = System.currentTimeMillis();", "backupEndTime = System.currentTimeMillis()", "backupEndTime", "logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0);", "logger.info(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0)", "(\"Backup file execution time: {} seconds\", (backupEndTime - backupStartTime) / 1000.0)", "\"Backup file execution time: {} seconds\"", "Backup file execution time: {} seconds", "(backupEndTime - backupStartTime) / 1000.0", "(backupEndTime - backupStartTime)", "backupEndTime - backupStartTime", "/**\n     * 创建目录（如果不存在）\n     *\n     * @param directory 目录路径\n     */", "private static void createDirectory(String directory) {\n        File file = new File(directory);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }", "(String directory)", "String directory", "{\n        File file = new File(directory);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }", "File file = new File(directory);", "file = new File(directory)", "new File(directory)", "(directory)", "if (!file.exists()) {\n            file.mkdirs();\n        }", "(!file.exists())", "!file.exists()", "file.exists()", "{\n            file.mkdirs();\n        }", "file.mkdirs();", "file.mkdirs()", "mkdirs"]}